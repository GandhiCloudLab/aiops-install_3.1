# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Installing Script for all CP4WAIOPS 3.1 components
#
# V3.1 
#
# ¬©2021 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

export TEMP_PATH=~/aiops-install

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"


source ./99_config-global.sh

export SCRIPT_PATH=$(pwd)
export LOG_PATH=""
__getClusterFQDN
__getInstallPath

banner
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  CloudPak for Watson AI OPS 3.1 - Post Install"
__output "  "
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Initialization
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Initializing"


export STORAGE_CLASS_FILE=$WAIOPS_STORAGE_CLASS_FILE



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Checks
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Prerequisites Checks"

        getClusterFQDN
        
        #getHosts

        check_and_install_jq
        check_and_install_cloudctl
        check_and_install_kubectl
        check_and_install_oc
        check_and_install_helm
        checkHelmExecutable
        #check_and_install_yq
        #dockerRunning
        checkOpenshiftReachable
        checkKubeconfigIsSet
        checkStorageClassExists
        checkDefaultStorageDefined
        #checkRegistryCredentials
header2End

header2Begin "Install Checks"
        checkInstallDone
header2End




header2Begin "CloudPak for Watson AI OPS 3.1 (CP4WAIOPS) will be installed in Cluster '$CLUSTER_NAME'"

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# CONFIG SUMMARY
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üîç Your configuration"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üéõ  CLUSTER :                  $CLUSTER_NAME"
__output "       üõ∞  AI Manager NAMESPACE:      $WAIOPS_NAMESPACE"
__output "       üìõ INSTANCE NAME :            $WAIOPS_NAME"
__output "       üì¶ INSTANCE SIZE :            $WAIOPS_SIZE"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üíæ STORAGE CLASS:             $WAIOPS_STORAGE_CLASS_FILE"
__output "       üíæ STORAGE CLASS LARGE:       $WAIOPS_STORAGE_CLASS_LARGE_BLOCK"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       #Ô∏è‚É£  TEMP PATH:                 $INSTALL_PATH"
__output "       ---------------------------------------------------------------------------------------------------------------------------"
__output "  "
header2End


header1End "Initializing"

exit 1
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Installing Add-Ons that are dependent on Common Services
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Register LDAP"


        header2Begin "LDAP - Register"

            if [[ $INSTALL_LDAP == "true" ]]; 
            then

                # --------------------------------------------------------------------------------------------------------------------------------
                #  INSTALL
                # --------------------------------------------------------------------------------------------------------------------------------
                ./43_addon_register_ldap.sh

            else
                __output "     ‚ùå LDAP is not enabled... Skipping"
            fi
        header2End


header1End "Register LDAP"




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Demo Apps
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
header1Begin "Install Demo Apps"


    if [[ $INSTALL_DEMO == "true" ]]; 
    then


        header2Begin "Install Bookinfo"
            oc create ns bookinfo

            oc apply -n bookinfo -f ./demo_install/bookinfo/bookinfo.yaml

            oc apply -n default -f ./demo_install/bookinfo/bookinfo-create-load.yaml
        header2End

        header2Begin "Install Kubetoy"
            kubectl create ns kubetoy
            kubectl apply -n kubetoy -f ./demo_install/kubetoy/kubetoy_all_in_one.yaml
        header2End

        header2Begin "Install RobotShop"
            oc create ns robot-shop

            oc adm policy add-scc-to-user privileged -n robot-shop -z robot-shop
            oc create clusterrolebinding default-robotinfo1-admin --clusterrole=cluster-admin --serviceaccount=robot-shop:robot-shop

            kubectl apply -f ./demo_install/robotshop/robot-all-in-one.yaml -n robot-shop
            kubectl apply -n robot-shop -f ./demo_install/robotshop/load-deployment.yaml
        header2End

    else
        __output "     ‚ùå Demo Apps are not enabled... Skipping"
    fi
header1End "Install Demo Apps"



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Patch Ingress 
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Patch Ingress"

            endpointPublishingStrategy=$(oc get ingresscontroller default -n openshift-ingress-operator -o yaml | grep HostNetwork || true) 

            if [[ $endpointPublishingStrategy =~ "HostNetwork" ]]; 
            then
                header2Begin "Patch Ingress"
                    oc patch namespace default --type=json -p '[{"op":"add","path":"/metadata/labels","value":{"network.openshift.io/policy-group":"ingress"}}]'
                    __output "     ‚úÖ Ingress successfully patched"
                header2End
            else
                __output "     ‚≠ï Not needed... Skipping"
            fi
header1End "Patch Ingress"




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create Strimzi Route
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Create Strimzi Route"

    header2Begin "Create Strimzi Route"
           kubectl patch Kafka strimzi-cluster -n  $WAIOPS_NAMESPACE -p '{"spec": {"kafka": {"listeners": {"external": {"type": "route"}}}}}' --type=merge
    header2End

header1End "Create Strimzi Route"



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Gateway
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Create Gateway"

    header2Begin "Create Gateway for Robotshop"
           oc apply -n $WAIOPS_NAMESPACE -f ./yaml/gateway/gateway-robotshop.yaml
    header2End

header1End "Create Gateway"






header1Begin "Create Topology Routes"

    header2Begin "Create Topology Merge Route"
            oc create route passthrough topology-merge -n $WAIOPS_NAMESPACE --service=evtmanager-topology-merge --port=merge-api
    header2End

    header2Begin "Create Topology Rest Route"
            oc create route passthrough topology-rest -n $WAIOPS_NAMESPACE --service=evtmanager-topology-rest-observer --port=rest-observer-api
    header2End



header1End "Create Topology Routes"





# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Housekeeping
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
header1Begin "Housekeeping"

            

        header2Begin "Create Flink Job Manager Route"
            oc create route passthrough job-manager -n $WAIOPS_NAMESPACE --service=demo-aimanager-ibm-flink-job-manager --port=8000
        header2End


        header2Begin "Adapt Nginx Certs"

            PODS_PENDING=""

            while  [[ $PODS_PENDING == "" ]]; do 
                PODS_PENDING=$(oc get pods -n $WAIOPS_NAMESPACE -l component=ibm-nginx | grep -v "No resources" || true)
                 __output "üï¶   Still checking..."
                sleep 5
            done

            oc project  $WAIOPS_NAMESPACE 

            oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}' | xargs oc get secret -n openshift-ingress -o yaml > tmpcert.yaml
            cat tmpcert.yaml | grep " tls.crt" | awk '{print $2}' |base64 -d > cert.crt
            cat tmpcert.yaml | grep " tls.key" | awk '{print $2}' |base64 -d > cert.key
            ibm_nginx_pod=$(oc get pods -l component=ibm-nginx -o jsonpath='{ .items[0].metadata.name }')
            oc exec ${ibm_nginx_pod} -- mkdir -p "/user-home/_global_/customer-certs"
            oc cp cert.crt ${ibm_nginx_pod}:/user-home/_global_/customer-certs/
            oc cp cert.key ${ibm_nginx_pod}:/user-home/_global_/customer-certs/
            for i in `oc get pods -l component=ibm-nginx -o jsonpath='{ .items[*].metadata.name }' `; do oc exec ${i} -- /scripts/reload.sh; done
            rm tmpcert.yaml cert.crt cert.key
        header2End








__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output " ‚úÖ AI OPS Installed"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"

__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""


printCredentials