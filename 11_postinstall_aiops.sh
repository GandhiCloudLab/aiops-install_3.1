# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Postinstall Script for all CP4WAIOPS 3.1 components
#
# V3.1 
#
# ¬©2021 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

export TEMP_PATH=~/aiops-install

# HACK for M1 Macs
export GODEBUG=asyncpreemptoff=1

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# Do Not Edit Below
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"

set -o errexit
set -o pipefail
#set -o xtrace
source ./99_config-global.sh

export SCRIPT_PATH=$(pwd)
export LOG_PATH=""
__getClusterFQDN
__getInstallPath

banner
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  CloudPak for Watson AI OPS 3.1 - Post Install"
__output "  "
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"
__output "  "
__output "  "



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Initialization
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header1Begin "Initializing"

header2Begin "Input Parameters" "magnifying"



        while getopts "o:" opt
        do
          case "$opt" in
              o ) OVERRIDE="$OPTARG" ;;
          esac
        done



        if [[ $OVERRIDE == "true" ]];
        then
           export OVERRIDE_CHECKS=true
            __output "     ‚ö†Ô∏è Warning: You have chosen to override install checks!"
        else
           export OVERRIDE_CHECKS=false
        fi


        export STORAGE_CLASS_FILE=$WAIOPS_STORAGE_CLASS_FILE

header2End



# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Install Checks
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
header2Begin "Prerequisites Checks"

        getClusterFQDN
        
        #getHosts

        #check_and_install_jq
        check_and_install_cloudctl
        #check_and_install_kubectl
        check_and_install_oc
        check_and_install_helm
        checkHelmExecutable
        #check_and_install_yq
        #dockerRunning
        #checkOpenshiftReachable
        checkKubeconfigIsSet
        #checkRegistryCredentials
        

header2End




header2Begin "CloudPak for Watson AI OPS 3.1 (CP4WAIOPS) will be installed in Cluster '$CLUSTER_NAME'"

# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# CONFIG SUMMARY
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üîç Your configuration"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üéõ  CLUSTER :                  $CLUSTER_NAME"
__output "       üõ∞  AI Manager NAMESPACE:      $WAIOPS_NAMESPACE"
__output "       üìõ INSTANCE NAME :            $WAIOPS_NAME"
__output "       üì¶ INSTANCE SIZE :            $WAIOPS_SIZE"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       üíæ STORAGE CLASS:             $WAIOPS_STORAGE_CLASS_FILE"
__output "       üíæ STORAGE CLASS LARGE:       $WAIOPS_STORAGE_CLASS_LARGE_BLOCK"
__output "       ---------------------------------------------------------------------------------------------------------------------"
__output "       #Ô∏è‚É£  TEMP PATH:                 $INSTALL_PATH"
__output "       ---------------------------------------------------------------------------------------------------------------------------"
__output "  "
header2End



header2Begin "CloudPak for Watson AI OPS  3.1 (CP4WAIOPS) will be installed with the following features:"
printComponentsInstall
header2End

header1End "Initializing"





header1Begin "Post-Install - Independent from CP4WAIOPS"

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Installing Add-Ons that are independent from AIOPS Install
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    


        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Installing HUMIO
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        header2Begin "Install HUMIO"
        
            if [[ $INSTALL_HUMIO == "true" ]]; 
            then
                # --------------------------------------------------------------------------------------------------------------------------------
                #  INSTALL
                # --------------------------------------------------------------------------------------------------------------------------------
                ./41_addon_install_humio.sh

            else
                __output "     ‚ùå Humio is not enabled... Skipping"
            fi

        header2End 


        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Installing LDAP
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
        header2Begin "LDAP - Install"

            if [[ $INSTALL_LDAP == "true" ]]; 
            then

                # --------------------------------------------------------------------------------------------------------------------------------
                #  INSTALL
                # --------------------------------------------------------------------------------------------------------------------------------
                ./42_addon_install_ldap.sh

            else
                __output "     ‚ùå LDAP is not enabled... Skipping"
            fi
        header2End



        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Create Demo User
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
        header2Begin "Create OCP User"

            oc project $WAIOPS_NAMESPACE 
            
            oc create serviceaccount -n default demo-admin >/dev/null 2>&1 || true
            oc create clusterrolebinding test-admin --clusterrole=cluster-admin --serviceaccount=default:demo-admin >/dev/null 2>&1 || true

            __output "      ‚úÖ OK"

        header2End




        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Install Demo Apps
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            
        header2Begin "Install Demo Apps"


            if [[ $INSTALL_DEMO == "true" ]]; 
            then

                APP_INSTALLED=$(oc get ns bookinfo || true) 
                if [[ $APP_INSTALLED =~ "Active" ]]; 
                then
                    __output "     ‚≠ï Bookinfo already installed... Skipping"
                else
                    header2Begin "Install Bookinfo"
                        oc create ns bookinfo >/dev/null 2>&1
                        oc apply -n bookinfo -f ./demo_install/bookinfo/bookinfo.yaml >/dev/null 2>&1
                        oc apply -n default -f ./demo_install/bookinfo/bookinfo-create-load.yaml >/dev/null 2>&1

                        __output "      ‚úÖ OK"
                    header2End
                fi

                APP_INSTALLED=$(oc get ns kubetoy || true) 
                if [[ $APP_INSTALLED =~ "Active" ]]; 
                then
                    __output "     ‚≠ï Kubetoy already installed... Skipping"
                else
                    header2Begin "Install Kubetoy"
                        oc create ns kubetoy >/dev/null 2>&1
                        oc apply -n kubetoy -f ./demo_install/kubetoy/kubetoy_all_in_one.yaml >/dev/null 2>&1
                        
                        __output "      ‚úÖ OK"

                    header2End
                fi


                APP_INSTALLED=$(oc get ns robot-shop || true) 
                if [[ $APP_INSTALLED =~ "Active" ]]; 
                then
                    __output "     ‚≠ï RobotShop already installed... Skipping"
                else
                    header2Begin "Install RobotShop"
                        oc create ns robot-shop >/dev/null 2>&1
                        oc adm policy add-scc-to-user privileged -n robot-shop -z robot-shop >/dev/null 2>&1
                        oc create clusterrolebinding default-robotinfo1-admin --clusterrole=cluster-admin --serviceaccount=robot-shop:robot-shop >/dev/null 2>&1
                        oc apply -f ./demo_install/robotshop/robot-all-in-one.yaml -n robot-shop >/dev/null 2>&1
                        oc apply -n robot-shop -f ./demo_install/robotshop/load-deployment.yaml >/dev/null 2>&1
                        
                        __output "      ‚úÖ OK"

                    header3End
                fi

            else
                __output "     ‚ùå Demo Apps are not enabled... Skipping"
            fi
        header2End "Install Demo Apps"



        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Patch Ingress 
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        header2Begin "Patch Ingress"

                    endpointPublishingStrategy=$(oc get ingresscontroller default -n openshift-ingress-operator -o yaml | grep HostNetwork || true) 

                    if [[ $endpointPublishingStrategy =~ "HostNetwork" ]]; 
                    then
                        header2Begin "Patch Ingress"
                            oc patch namespace default --type=json -p '[{"op":"add","path":"/metadata/labels","value":{"network.openshift.io/policy-group":"ingress"}}]' >/dev/null 2>&1
                            __output "     ‚úÖ Ingress successfully patched"
                        header2End
                    else
                        __output "     ‚≠ï Not needed... Skipping"
                    fi
        header2End "Patch Ingress"





        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Install Gateway
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        header2Begin "Create Gateway"

            header3Begin "Create Gateway for all Events Severity > 2"

                cp ./yaml/gateway/gateway-generic-template.yaml /tmp/gateway-generic.yaml
                ${SED} -i "s/<CP4WAIOPS_NAMESPACE>/$WAIOPS_NAMESPACE/" /tmp/gateway-generic.yaml
                oc apply -n $WAIOPS_NAMESPACE -f /tmp/gateway-generic.yaml  >/dev/null 2>&1 || true
                __output "      ‚úÖ OK"
            header3End

        header2End "Create Gateway"





        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Create Routes
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        header2Begin "Create Topology Routes"

            header3Begin "Create Topology Merge Route"
                    oc create route passthrough topology-merge -n $WAIOPS_NAMESPACE --service=evtmanager-topology-merge --port=merge-api >/dev/null 2>&1  || true
                __output "      ‚úÖ OK"

            header3End

            header3Begin "Create Topology Rest Route"
                    oc create route passthrough topology-rest -n $WAIOPS_NAMESPACE --service=evtmanager-topology-rest-observer --port=rest-observer-api >/dev/null 2>&1  || true
                __output "      ‚úÖ OK"

            header3End



        header2End "Create Topology Routes"



        header2Begin "Create Flink Job Manager Routes"

            header3Begin "Create Flink Job Manager Route"
                oc create route passthrough job-manager -n $WAIOPS_NAMESPACE --service=aimanager-ibm-flink-job-manager --port=8000 >/dev/null 2>&1 || true
                __output "      ‚úÖ OK"

            header3End

        header2End "Create Flink Job Manager Routes"



        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Installing Add-Ons that are dependent on Common Services
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # This can only be done if the CS install is finished
 if [[ $OVERRIDE_CHECKS == "false" ]]; 
                    then

        header2Begin "Install Checks"
                checkCSDone
                __output "      ‚úÖ OK: Common Services are Ready"
        header2End
fi

        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Register LDAP
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------    



        header2Begin "Register LDAP"


                header3Begin "LDAP - Register"

                    if [[ $INSTALL_LDAP == "true" ]]; 
                    then

                        # --------------------------------------------------------------------------------------------------------------------------------
                        #  INSTALL
                        # --------------------------------------------------------------------------------------------------------------------------------
                        ./43_addon_register_ldap.sh
                        __output "      ‚úÖ OK"

                    else
                        __output "     ‚ùå LDAP is not enabled... Skipping"
                    fi
                header3End


        header2End "Register LDAP"



        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Installing Add-Ons that are dependent on Full Installation
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 if [[ $OVERRIDE_CHECKS == "false" ]]; 
                    then
        header2Begin "Install Checks"
                checkInstallDone
        header2End
fi


        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Create Strimzi Route
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        header2Begin "Create Strimzi Route"

            header3Begin "Create Strimzi Route"
                oc patch Kafka strimzi-cluster -n  $WAIOPS_NAMESPACE -p '{"spec": {"kafka": {"listeners": {"external": {"type": "route"}}}}}' --type=merge >/dev/null 2>&1 || true
                __output "      ‚úÖ OK"
            header3End

        header2End "Create Strimzi Route"



        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Housekeeping
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
        header2Begin "Housekeeping"

            
                header3Begin "Adapt Nginx Certs"

                    PODS_PENDING=""

                    while  [[ $PODS_PENDING == "" ]]; do 
                        PODS_PENDING=$(oc get pods -n $WAIOPS_NAMESPACE -l component=ibm-nginx | grep -v "No resources" || true)
                        __output "üï¶   Still checking..."
                        sleep 5
                    done

                    # From here: https://github.ibm.com/up-and-running/watson-aiops/blob/master/docs/AI_Manager/Installation.md

                    oc project  $WAIOPS_NAMESPACE 

NAMESPACE=$(oc project -q)
ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
oc get secret -n openshift-ingress -o 'go-template={{index .data "tls.crt"}}' ${ingress_pod} | base64 -d | base64 -b 0 > cert.crt
oc get secret -n openshift-ingress -o 'go-template={{index .data "tls.key"}}' ${ingress_pod} | base64 -d | base64 -b 0 > cert.key
echo -n "apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: openshift-tls-secret
  namespace: $NAMESPACE
data:
  cert.crt: " > openshift-tls-secret.yaml
cat cert.crt >> openshift-tls-secret.yaml
echo >> openshift-tls-secret.yaml
echo "  cert.key: " >> openshift-tls-secret.yaml
cat cert.key >> openshift-tls-secret.yaml
oc create -f openshift-tls-secret.yaml

                    oc patch deployment ibm-nginx -p '{"spec":{"template":{"spec":{"volumes":[{"name":"external-tls-secret","secret":{"secretName": "openshift-tls-secret"}}]}}}}'
                header3End

        header2End "Housekeeping"



header1End "Post-Install - Independent from CP4WAIOPS"





__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output " ‚úÖ CP4WAIOPS Base Elements Installed"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "----------------------------------------------------------------------------------------------------------------------------------------------------"
__output "***************************************************************************************************************************************************"
__output "***************************************************************************************************************************************************"





__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""
__output ""


printCredentials